{"version":3,"sources":["service-worker.js","report-web-vitals.js","services/base-http.service.js","client/AuthPage/reducer/authActionCreators.js","client/AuthPage/services/auth.service.js","client/AuthPage/reducer/authActions.js","client/AuthPage/components/AuthForm/authFormFields.js","shared/components/Button/types.js","shared/components/Button/Button.jsx","shared/components/CustomFormFields/SubmitContainer.jsx","shared/components/ErrorMessage/ErrorMessage.jsx","shared/components/CustomFormFields/FormikField.jsx","client/AuthPage/components/AuthForm/AuthForm.jsx","client/AuthPage/components/AuthPage/AuthPage.jsx","client/RequestsPage/reducer/requestsActionCreators.js","client/RequestsPage/services/processes.service.js","client/RequestsPage/reducer/requestsActions.js","client/RequestsPage/components/TableContainer/TableContainer.jsx","client/RequestsPage/components/RequestsPage/RequestsPage.jsx","app/routes/AppRoutes.jsx","client/Header/reducer/headerActionCreators.js","client/Header/reducer/headerActions.js","client/Header/components/LangSwitcher/LangSwitcher.jsx","client/Header/components/LogoutContent/LogoutContent.jsx","client/Header/components/Header/Header.jsx","client/RequestsPage/components/DrawerContainer/DrawerContainer.jsx","client/RequestsPage/components/NewProcessForm/typeConverter.js","client/RequestsPage/components/NewProcessForm/NewProcessForm.jsx","client/RequestsPage/components/ModalContainer/ModalContainer.jsx","app/componets/App/App.jsx","client/AuthPage/reducer/authReducer.js","client/RequestsPage/reducer/requestsReducer.js","client/Header/reducer/headerReducer.js","app/store/root-reducer.js","app/store/store.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","BaseHttpService","BASE_URL","process","_accessToken","_tenantId","_username","_handle401","removeTenantData","replace","_getCommonOptions","accessToken","loadAccessToken","headers","saveTenantData","username","tenantId","localStorage","setItem","removeItem","endpoint","options","Object","assign","this","axios","get","res","data","catch","error","_handleHttpError","post","status","put","delete","patch","response","getItem","loadUsername","loadTenantId","authServ","password","btoa","toString","id","loginFailed","payload","type","authFormFields","loginForm","fields","name","label","v4","submitText","reminderForm","types","basic","transparent","Button","props","text","classType","additionalClass","handleClick","disabled","disabledClass","className","onClick","defaultProps","SubmitContainer","useFormikContext","errors","touched","errorBool","keys","length","touchBool","ErrorMessage","errorMessage","useSelector","state","auth","shallowEqual","FormikField","useField","field","helpers","labelClassName","fieldClassName","labelField","htmlFor","currentField","value","map","key","onChange","event","file","currentTarget","files","filename","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","base64FileConverter","base64file","split","processedFile","setValue","AuthForm","reminderActive","dispatch","useDispatch","authFormData","initialValues","fromEntries","element","formProps","validate","values","onSubmit","a","login","loginRequestCreator","enableReinitialize","AuthPage","processesService","body","variables","sorting","withVariablesInReturn","processesIdRequestCreator","getProcessesId","number","slice","definitionId","processesId","processesStatusRequestCreator","console","log","tasks","taskRequests","getProcessStatus","all","responses","task","find","executionId","created","processesNamesRequestCreator","err","processesIdUpdated","tableData","processesKeysData","uniKey","Array","from","Set","getProcessName","parsedXML","bpmn20Xml","parseString","processKeyData","push","i","rest","year","month","day","parseDate","Date","parse","toLocaleString","TableContainer","searchInput","dataIndex","dataSource","requests","loading","tableLoading","useState","searchText","setSearchText","searchedColumn","setSearchedColumn","handleSearch","selectedKeys","confirm","handleReset","clearFilters","getFilter","filterElements","filterStatus","filterName","filterDropdown","setSelectedKeys","style","padding","ref","node","placeholder","e","target","onPressEnter","width","marginBottom","display","icon","SearchOutlined","size","filterIcon","filtered","color","undefined","onFilter","record","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","columns","title","filters","indexOf","defaultSortOrder","sorter","b","getDate","date","dateParts","pagination","position","RequestsPage","store","drawerActive","hiddenClass","useEffect","getProcessDefinitions","processesDefinitions","uniDefinitions","JSON","stringify","AppRoutes","isAuthorized","exact","path","setCurrentLanguage","LangSwitcher","LogoutContent","profileText","logout","Header","headerContent","DrawerContainer","drawerVisible","drawerOptions","userProcesses","formFields","placement","closable","onClose","typeConverter","string","long","boolean","enum","NewProcessForm","formOptions","defaultValue","fieldTypes","actions","formKey","formData","processedData","offset","getTimezoneOffset","timezone","toISOString","valueInfo","encoding","startNewProcess","resetForm","ModalContainer","modalVisible","modalActive","onOk","centered","onCancel","footer","App","initialState","forgetPassword","currentLanguage","rootReducer","combineReducers","userName","formTitle","header","middleware","getDefaultMiddleware","serializableCheck","configureStore","reducer","devTools","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d119e09c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import axios from \"axios\";\r\n\r\nexport default class BaseHttpService {\r\n\r\n    BASE_URL = `${process.env.REACT_APP_BACKEND_URL}`;\r\n    _accessToken = null;\r\n    _tenantId = null;\r\n    _username = null;\r\n\r\n    async get(endpoint = \"\", options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .get(`${this.BASE_URL}/${endpoint}`, options)\r\n            .then((res) => res.data)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async post(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .post(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .then((res) => {\r\n                return {data: res.data, status: res.status}\r\n            })\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async put(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .put(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async delete(endpoint = \"\", options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .delete(`${this.BASE_URL}/${endpoint}`, options)\r\n            .then((res) => res.data)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async patch(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .patch(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    _handleHttpError(error) {\r\n        const { status } = error.response;\r\n        if (status !== 401) {\r\n            throw error;\r\n        } else {\r\n            return this._handle401();\r\n        }\r\n    }\r\n\r\n    _handle401 = () => {\r\n        this._accessToken = null;\r\n        this._tenantId = null;\r\n        this._username = null;\r\n        this.removeTenantData();\r\n        window.location.replace(\"/\");\r\n    };\r\n\r\n    _getCommonOptions = () => {\r\n        const { accessToken } = this.loadAccessToken();\r\n\r\n        return {\r\n            headers: {\r\n                'Authorization': `Basic ${accessToken}`,\r\n            },\r\n        };\r\n    };\r\n\r\n    get accessToken() {\r\n        return this._accessToken ? this._accessToken : this.loadAccessToken();\r\n    }\r\n\r\n    loadAccessToken() {\r\n        const accessToken = localStorage.getItem(\"accessToken\");\r\n        this._accessToken = accessToken;\r\n\r\n        return {\r\n            accessToken,\r\n        };\r\n    }\r\n\r\n    get username() {\r\n        return this._username ? this._username : this.loadUsername();\r\n    }\r\n\r\n    loadUsername() {\r\n        const username = localStorage.getItem(\"username\");\r\n        this._username = username;\r\n\r\n        return {\r\n            username,\r\n        };\r\n    }\r\n\r\n    get tenantId() {\r\n        return this._tenantId ? this._tenantId : this.loadTenantId();\r\n    }\r\n\r\n    loadTenantId() {\r\n        const tenantId = localStorage.getItem(\"tenantId\");\r\n        this._tenantId = tenantId;\r\n\r\n        return {\r\n            tenantId,\r\n        };\r\n    }\r\n\r\n    saveTenantData = (username, tenantId, accessToken) => {\r\n        this._username = username;\r\n        this._accessToken = accessToken;\r\n        this._tenantId = tenantId;\r\n        localStorage.setItem(\"username\", username);\r\n        localStorage.setItem(\"tenantId\", tenantId);\r\n        localStorage.setItem(\"accessToken\", accessToken);\r\n\r\n        return {\r\n            username,\r\n            tenantId,\r\n            accessToken\r\n        };\r\n    };\r\n\r\n    removeTenantData = () => {\r\n        localStorage.removeItem(\"username\");\r\n        localStorage.removeItem(\"tenantId\");\r\n        localStorage.removeItem(\"accessToken\");\r\n    };\r\n}\r\n","import {\r\n    LOGOUT,\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILED,\r\n    TOGGLE_AUTH_PAGE_FORM,\r\n} from './authActions';\r\nimport AuthService from '../services/auth.service';\r\n\r\nconst authServ = new AuthService();\r\n\r\nexport const loginRequest = () => {\r\n    return { type: LOGIN_REQUEST };\r\n};\r\n\r\nexport const loginSuccess = (payload) => {\r\n    return { type: LOGIN_SUCCESS, payload };\r\n};\r\n\r\nexport const loginFailed = (payload) => {\r\n    return { type: LOGIN_FAILED, payload };\r\n};\r\n\r\nexport const logout = () => {\r\n    return { type: LOGOUT }\r\n};\r\n\r\nexport const toggleAuthPageForm = () => {\r\n    return {\r\n        type: TOGGLE_AUTH_PAGE_FORM\r\n    }\r\n};\r\n\r\nexport const loginRequestCreator = ({ username, password }) => {\r\n    return async ( dispatch ) => {\r\n        dispatch(loginRequest());\r\n        try {\r\n            await authServ.login({ username, password });\r\n            dispatch(loginSuccess(username));\r\n        } catch (err) {\r\n            if (err.name === 'InvalidCharacterError') {\r\n                dispatch(loginFailed(401));\r\n            } else {\r\n                dispatch(loginFailed(err.response.status));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const logoutRequestCreator = () => {\r\n    return async ( dispatch ) => {\r\n        await authServ.logout();\r\n        dispatch(logout());\r\n    }\r\n};\r\n\r\n\r\n","import axios from 'axios';\r\nimport BaseHttpService from '../../../services/base-http.service';\r\n\r\nexport default class AuthService extends BaseHttpService {\r\n    async login({ username, password }) {\r\n        const accessToken = `${btoa(`${username.toString()}:${password.toString()}`)}`;\r\n        const options = {\r\n            headers: {\r\n                'Authorization': `Basic ${accessToken}`,\r\n            },\r\n        };\r\n        const { data } = await axios.get(`${this.BASE_URL}/tenant?userMember=${username}`, options);\r\n        const tenantId = data[0].id;\r\n        this.saveTenantData(username, tenantId, accessToken);\r\n        return data[0];\r\n    }\r\n\r\n    logout() {\r\n        this.removeTenantData();\r\n    }\r\n};\r\n","export const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILED = \"LOGIN_FAILED\";\r\nexport const LOGOUT = \"LOGOUT\";\r\nexport const TOGGLE_AUTH_PAGE_FORM = \"TOGGLE_AUTH_PAGE_FORM\";\r\n\r\n","import { v4 } from 'uuid';\n\nexport const authFormFields = {\n    loginForm: {\n        fields: [\n            {\n                type: \"text\",\n                name: \"username\",\n                label: \"Ім'я користувача\",\n                id: v4(),\n            },\n            {\n                type: \"password\",\n                name: \"password\",\n                label: \"Пароль\",\n                id: v4(),\n            },\n        ],\n        submitText: \"Увійти\"\n    },\n    reminderForm: {\n        fields: [\n            {\n                type: \"text\",\n                name: \"username\",\n                label: \"Ім'я користувача\",\n                id: v4(),\n            },\n            {\n                type: \"email\",\n                name: \"email\",\n                label: \"Email\",\n                id: v4(),\n            },\n        ],\n        submitText: \"Нагадати\",\n    },\n};\n","export const types = {\r\n    basic: \"button-basic\",\r\n    transparent: \"button-transparent\",\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {types} from \"./types\"\r\nimport './Button.scss'\r\n\r\nconst Button = props => {\r\n    const { text, type, classType, additionalClass, handleClick, disabled } = props;\r\n    const disabledClass = disabled ? 'button-disabled' : '';\r\n    const className = `button ${types[classType]} ${additionalClass} ${disabledClass}`;\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={className}\r\n            onClick={handleClick}\r\n            disabled={disabled}\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.defaultProps = {\r\n    additionalClass: '',\r\n    type: 'button',\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf([\r\n        'button',\r\n        'submit',\r\n        'reset',\r\n    ]),\r\n    classType: PropTypes.oneOf([\r\n        'basic',\r\n        'transparent',\r\n    ]).isRequired,\r\n    additionalClass: PropTypes.string,\r\n    handleClick: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n};\r\n","import { useFormikContext } from \"formik\";\r\nimport React from \"react\";\r\nimport Button from '../Button';\r\n\r\nexport const SubmitContainer = ({text}) => {\r\n    const {errors, touched} = useFormikContext();\r\n    let errorBool = Boolean(Object.keys(errors).length);\r\n    let touchBool = Boolean(!Object.keys(touched).length);\r\n\r\n    return (\r\n        <div className={'form-submit-container'}>\r\n            <Button\r\n                text={text}\r\n                classType='basic'\r\n                type={'submit'}\r\n                disabled={errorBool || touchBool}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\nimport './ErrorMessage.scss'\r\n\r\nexport const ErrorMessage = () => {\r\n    const errorMessage = useSelector(state => state.auth.errorMessage, shallowEqual);\r\n\r\n    return (\r\n        <div className={'error-message'}>\r\n            <span>{errorMessage}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { useField } from \"formik\";\r\n\r\nimport './CustomFormFields.scss';\r\n\r\nconst base64FileConverter = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n};\r\n\r\nexport const FormikField = ({ label, options, ...props }) => {\r\n    const {type, name} = props;\r\n    const [field, meta, helpers] = useField(props);\r\n    const labelClassName = type === 'checkbox' ?\r\n        'form-label-secondary' :\r\n        'form-label-primary';\r\n    const fieldClassName = type === 'checkbox' ?\r\n        'form-field-secondary' :\r\n        type === 'file' ?\r\n            'form-field-file' :\r\n            'form-field-primary';\r\n    const labelField = <label className={labelClassName} htmlFor={name}>{label}</label>;\r\n    const currentField = options ?\r\n        <select className={fieldClassName} {...field} {...props}>\r\n            <option value={''}/>\r\n            {options.map(({id, name}) => <option value={id} key={id}>{name}</option>)}\r\n        </select> :\r\n        type === 'file' ?\r\n            <input\r\n                className={fieldClassName}\r\n                id={name}\r\n                {...props}\r\n                onChange={(event) => {\r\n                    const file = event.currentTarget.files[0];\r\n                    const filename = file.name;\r\n                    base64FileConverter(file)\r\n                        .then((result) => {\r\n                            const base64file = result.split(',')[1];\r\n                            const processedFile = {\r\n                                filename,\r\n                                base64file,\r\n                            };\r\n                            return processedFile;\r\n                        })\r\n                        .then((processedFile) => helpers.setValue(processedFile));\r\n                }}\r\n            /> :\r\n            <input\r\n                className={fieldClassName}\r\n                id={name}\r\n                {...field}\r\n                {...props}\r\n            />;\r\n    return (\r\n        <div>\r\n            {type !== 'checkbox' ? labelField : null}\r\n            {currentField}\r\n            {type === 'checkbox' ? labelField : null}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\nimport { Formik, Form } from \"formik\";\nimport { useDispatch } from 'react-redux';\n\nimport { authFormFields } from \"./authFormFields\";\nimport { SubmitContainer } from '../../../../shared/components/CustomFormFields/SubmitContainer';\nimport { ErrorMessage } from '../../../../shared/components/ErrorMessage';\nimport { loginRequestCreator } from '../../reducer/authActionCreators';\nimport { FormikField } from '../../../../shared/components/CustomFormFields/FormikField';\n\nexport const AuthForm = ({reminderActive}) => {\n    const dispatch = useDispatch();\n    const authFormData = reminderActive ?\n        authFormFields.reminderForm :\n        authFormFields.loginForm;\n\n    const initialValues = Object.fromEntries(authFormData.fields.map(element => [ element.name, '' ]));\n\n    const fields = authFormData.fields.map(element => <FormikField\n        key={element.id}\n        type={element.type}\n        name={element.name}\n        label={element.label}\n    />);\n\n    const validate = values => {\n        const errors = {};\n        for (let key in values) {\n            if (!values[key]) {\n                errors[key] = 'required';\n            }\n        }\n        return errors;\n    };\n\n    const onSubmit = (values)=> {\n        dispatch(loginRequestCreator(values))\n    };\n\n    const formProps = {\n        initialValues,\n        validate,\n        onSubmit\n    };\n\n    return (\n        <Formik {...formProps} enableReinitialize>\n            <Form>\n                <div>\n                    {fields}\n                    <ErrorMessage />\n                    <SubmitContainer text={authFormData.submitText} />\n                </div>\n            </Form>\n        </Formik>\n    );\n};\n\n","import React from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './AuthPage.scss'\r\nimport { toggleAuthPageForm } from '../../reducer/authActionCreators';\r\nimport { AuthForm } from '../AuthForm';\r\nimport Button from '../../../../shared/components/Button';\r\n\r\nexport const AuthPage = () => {\r\n    const reminderActive = useSelector(state => state.auth.reminderActive, shallowEqual);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => dispatch(toggleAuthPageForm());\r\n\r\n    return (\r\n        <div className={'auth-page'}>\r\n            <div className={'auth-page__form'}>\r\n                <AuthForm reminderActive={reminderActive}/>\r\n                <Button\r\n                    text={reminderActive ? 'Повернутись' : 'Забули пароль?'}\r\n                    classType='transparent'\r\n                    additionalClass={'auth-page__reminder'}\r\n                    handleClick={handleClick}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { parseString } from 'xml2js'\r\n\r\nimport {\r\n    CLEAR_DATA,\r\n    REQUEST_TABLE_DATA,\r\n    SET_DRAWER_OPTIONS,\r\n    SET_FORM_OPTIONS,\r\n    SET_TABLE_DATA,\r\n    TOGGLE_DRAWER_STATUS,\r\n    TOGGLE_MODAL_STATUS,\r\n} from './requestsActions';\r\nimport ProcessesService from '../services/processes.service';\r\n\r\nconst processesService = new ProcessesService();\r\n\r\nexport const setTableData = (payload) => {\r\n    return { type: SET_TABLE_DATA, payload };\r\n};\r\n\r\nexport const requestTableData = () => {\r\n    return { type: REQUEST_TABLE_DATA };\r\n};\r\n\r\nexport const toggleDrawerStatus = () => {\r\n    return { type: TOGGLE_DRAWER_STATUS };\r\n};\r\n\r\nexport const toggleModalStatus = () => {\r\n    return { type: TOGGLE_MODAL_STATUS };\r\n};\r\n\r\nexport const setDrawerOptions = (payload) => {\r\n    return { type: SET_DRAWER_OPTIONS, payload };\r\n};\r\n\r\nexport const setRequestPageFormOptions = (payload) => {\r\n    return { type: SET_FORM_OPTIONS, payload };\r\n};\r\n\r\nexport const clearData = () => {\r\n    return { type: CLEAR_DATA };\r\n};\r\n\r\nexport const processesIdRequestCreator = () => {\r\n    return async ( dispatch ) => {\r\n        dispatch(requestTableData());\r\n        try {\r\n            await processesService.getProcessesId()\r\n                .then((res) => res.map(element => ({\r\n                    id: element.id,\r\n                    number: element.id.slice(0, 13),\r\n                    key: element.definitionId.split(':')[0]\r\n                })))\r\n                .then((processesId) => dispatch(processesStatusRequestCreator(processesId)));\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const processesStatusRequestCreator = (processesId) => {\r\n    return async ( dispatch ) => {\r\n        try {\r\n            let tasks = [...processesId];\r\n            const taskRequests = processesId.map(element => processesService.getProcessStatus(element.id));\r\n            Promise.all(taskRequests)\r\n                .then(responses => responses.map(\r\n                    ([response]) => {\r\n                        const task = tasks.find(({id}) => id === response.executionId);\r\n                        return {...task, created: response.created, status: response.name};\r\n                    }))\r\n                .then(result => {\r\n                    dispatch(processesNamesRequestCreator(result))\r\n                })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const processesNamesRequestCreator = (processesIdUpdated) => {\r\n    return async ( dispatch ) => {\r\n        try {\r\n            let tableData = [...processesIdUpdated];\r\n            let processesKeysData = [];\r\n            const keys = tableData.map(({key}) => key);\r\n            const uniKey = Array.from(new Set(keys));\r\n            const taskRequests = uniKey.map(element => processesService.getProcessName(element));\r\n            Promise.all(taskRequests)\r\n                .then(responses => responses.map(\r\n                    ({bpmn20Xml}) => {\r\n                        let parsedXML;\r\n                        parseString(bpmn20Xml, (err, result) => {\r\n                            parsedXML = result;\r\n                        });\r\n                        const processKeyData = parsedXML['bpmn:definitions']['bpmn:process'][0]['$'];\r\n                        processesKeysData.push(processKeyData);\r\n                        return processesKeysData\r\n                    })\r\n                )\r\n                .then(result => {\r\n                    for (let i = 0; i < processesKeysData.length; i++) {\r\n                        tableData = tableData.map(element => element.key === processesKeysData[i].id ?\r\n                            {...element, name: processesKeysData[i].name} : element);\r\n                    }\r\n                    tableData = tableData.map(({key, id, ...rest}) => ({...rest}));\r\n                    const options = {\r\n                        year: 'numeric',\r\n                        month: 'numeric',\r\n                        day: 'numeric',\r\n                    };\r\n                    for (let i = 0; i < tableData.length; i++) {\r\n                        tableData[i].key = i+1;\r\n                        const parseDate = new Date(Date.parse(tableData[i].created));\r\n                        tableData[i].created = parseDate.toLocaleString(\"ru\", options);\r\n                    }\r\n                    dispatch(setTableData(tableData))\r\n                })\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const drawerOptionsRequestCreator = () => {\r\n    return async ( dispatch ) => {\r\n        try {\r\n            await processesService.getProcessDefinitions()\r\n                .then((res) => res.map(element => ({\r\n                    key: element.key,\r\n                    name: element.name\r\n                })))\r\n                .then((processesDefinitions) => {\r\n                    const uniDefinitions = Array.from(new Set(processesDefinitions.map(JSON.stringify))).map(JSON.parse);\r\n                    dispatch(setDrawerOptions(uniDefinitions));\r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const requestPageFormFieldsRequestCreator = (key, name) => {\r\n    return async ( dispatch ) => {\r\n        try {\r\n            await processesService.getProcessName(key)\r\n                .then(({bpmn20Xml}) => {\r\n                    let parsedXML;\r\n                    parseString(bpmn20Xml, (err, result) => {\r\n                        parsedXML = result;\r\n                    });\r\n                    const fieldsData = parsedXML['bpmn:definitions']['bpmn:process'][0]['bpmn:startEvent'][0]['bpmn:extensionElements'][0]['camunda:formData'][0]['camunda:formField'];\r\n                    const formFields = fieldsData.map(element => element['camunda:value'] ?\r\n                        {...element['$'], options: element['camunda:value'].map(element => element['$'])} :\r\n                        element['$']);\r\n                    dispatch(setRequestPageFormOptions({formFields, name, key}));\r\n                    dispatch(toggleModalStatus())\r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n\r\nexport const startNewProcessRequestCreator = (formKey, formData) => {\r\n    return async ( dispatch ) => {\r\n        try {\r\n            await processesService.startNewProcess(formKey, formData)\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        dispatch(processesIdRequestCreator());\r\n                    }\r\n                });\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n};\r\n","import BaseHttpService from '../../../services/base-http.service';\r\n\r\nexport default class ProcessesIdService extends BaseHttpService {\r\n    async getProcessesId() {\r\n        const endpoint = 'process-instance';\r\n        const {username} = this.loadUsername();\r\n        const body = {\r\n            variables:\r\n                [\r\n                    {\r\n                        'name': 'Initiator',\r\n                        'operator': 'eq',\r\n                        'value': `${username}`,\r\n                    }\r\n                ],\r\n            sorting:\r\n                [\r\n                    {\r\n                        'sortBy': 'definitionKey',\r\n                        'sortOrder': 'asc',\r\n                    },\r\n                    {\r\n                        'sortBy': 'instanceId',\r\n                        'sortOrder': 'desc',\r\n                    }\r\n                ],\r\n        };\r\n        const {data} = await this.post(endpoint, body);\r\n        return data;\r\n    }\r\n\r\n    async getProcessStatus(id) {\r\n        const endpoint = `task?processInstanceId=${id}`;\r\n        const response = await this.get(endpoint);\r\n        return response;\r\n    }\r\n\r\n    async getProcessName(key) {\r\n        const {tenantId} = this.loadTenantId();\r\n        const endpoint = `process-definition/key/${key}/tenant-id/${tenantId}/xml`;\r\n        const response = await this.get(endpoint);\r\n        return response;\r\n    }\r\n\r\n    async getProcessDefinitions() {\r\n        const {tenantId} = this.loadTenantId();\r\n        const endpoint = `process-definition?tenantIdIn=${tenantId}`;\r\n        const response = await this.get(endpoint);\r\n        return response;\r\n    }\r\n\r\n    async startNewProcess(key, data) {\r\n        const {tenantId} = this.loadTenantId();\r\n        const body = {\r\n            variables: data,\r\n            withVariablesInReturn: true\r\n        };\r\n        const endpoint = `process-definition/key/${key}/tenant-id/${tenantId}/start`;\r\n        const response = this.post(endpoint, body);\r\n        return response;\r\n    }\r\n};\r\n\r\n","export const REQUEST_TABLE_DATA = \"REQUEST_TABLE_DATA\";\r\nexport const SET_TABLE_DATA = \"SET_TABLE_DATA\";\r\nexport const TOGGLE_DRAWER_STATUS = \"TOGGLE_DRAWER_STATUS\";\r\nexport const TOGGLE_MODAL_STATUS = \"TOGGLE_MODAL_STATUS\";\r\nexport const SET_DRAWER_OPTIONS = \"SET_DRAWER_OPTIONS\";\r\nexport const SET_FORM_OPTIONS = \"SET_FORM_OPTIONS\";\r\nexport const CLEAR_DATA = \"CLEAR_DATA\";\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\nexport const TableContainer = () => {\r\n    const dataSource = useSelector(state => state.requests.tableData, shallowEqual);\r\n    const loading = useSelector(state => state.requests.tableLoading, shallowEqual);\r\n    const [searchText, setSearchText] = useState('');\r\n    const [searchedColumn, setSearchedColumn] = useState('');\r\n    let searchInput;\r\n\r\n    const getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        searchInput = node;\r\n                    }}\r\n                    placeholder={`Search ${dataIndex}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        Reset\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilter: (value, record) =>\r\n            record[dataIndex]\r\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n                : '',\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => searchInput.select(), 100);\r\n            }\r\n        },\r\n        render: text =>\r\n            searchedColumn === dataIndex ? (\r\n                <Highlighter\r\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n                    searchWords={[searchText]}\r\n                    autoEscape\r\n                    textToHighlight={text ? text.toString() : ''}\r\n                />\r\n            ) : (\r\n                text\r\n            ),\r\n    });\r\n\r\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n        confirm();\r\n        setSearchText(selectedKeys[0]);\r\n        setSearchedColumn(dataIndex);\r\n\r\n    };\r\n\r\n    const handleReset = clearFilters => {\r\n        clearFilters();\r\n        setSearchText('');\r\n    };\r\n\r\n    const getFilter = (data, key) => {\r\n        const filterElements = data.map(element => element[key]);\r\n        const uniFilterElements = Array.from(new Set(filterElements));\r\n        return (\r\n            uniFilterElements.map(element => ({text: element, value: element}))\r\n        );\r\n    };\r\n    const filterStatus = getFilter(dataSource, 'status');\r\n    const filterName = getFilter(dataSource, 'name');\r\n    const {filterDropdown, filterIcon, onFilter, onFilterDropdownVisibleChange, render} = getColumnSearchProps('number');\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Номер',\r\n            dataIndex: 'number',\r\n            key: 'number',\r\n            className: 'table_text',\r\n            filterDropdown,\r\n            filterIcon,\r\n            onFilter,\r\n            onFilterDropdownVisibleChange,\r\n            render\r\n        },\r\n        {\r\n            title: 'Статус',\r\n            dataIndex: 'status',\r\n            key: 'status',\r\n            filters: filterStatus,\r\n            className: 'table_text',\r\n            onFilter: (value, record) => record.status.indexOf(value) === 0,\r\n        },\r\n        {\r\n            title: 'Створено',\r\n            dataIndex: 'created',\r\n            key: 'created',\r\n            className: 'table_text',\r\n            defaultSortOrder: 'descend',\r\n            sorter: (a, b) => {\r\n                const getDate = (date) => {\r\n                    const dateParts = date.split('.');\r\n                    return new Date(dateParts[2], dateParts[1]-1, dateParts[0]);\r\n                };\r\n                let dateA = getDate(a.created);\r\n                let dateB = getDate(b.created);\r\n                return(dateA - dateB)\r\n            }\r\n        },\r\n        {\r\n            title: 'Запит',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            filters: filterName,\r\n            className: 'table_text',\r\n            onFilter: (value, record) => record.name.indexOf(value) === 0,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Table\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={{position: ['bottomCenter']}}\r\n            size=\"middle\"\r\n            loading={loading}\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport './RequestsPage.scss'\r\nimport {\r\n    drawerOptionsRequestCreator,\r\n    processesIdRequestCreator,\r\n    toggleDrawerStatus,\r\n} from '../../reducer/requestsActionCreators';\r\nimport { TableContainer } from '../TableContainer';\r\n\r\nexport const RequestsPage = () => {\r\n    const visible = useSelector(store => store.requests.drawerActive, shallowEqual);\r\n    const dispatch = useDispatch();\r\n    const hiddenClass = visible ? 'hidden' : '';\r\n    const handleDrawerClick = () => {dispatch(toggleDrawerStatus())};\r\n\r\n    useEffect(() => {\r\n        dispatch(processesIdRequestCreator());\r\n        dispatch(drawerOptionsRequestCreator())\r\n    }, []);\r\n\r\n    return (\r\n        <div className={'processes-page'}>\r\n            <TableContainer/>\r\n            <div\r\n                className={`processes-page__new-request ${hiddenClass}`}\r\n                onClick={handleDrawerClick}\r\n            >\r\n                <span>Новий запит</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\n\r\nimport { AuthPage } from '../../client/AuthPage/components/AuthPage';\r\nimport { RequestsPage } from '../../client/RequestsPage/components/RequestsPage';\r\n\r\nexport const AppRoutes = () => {\r\n    const isAuthorized = useSelector(state => state.auth.isAuthorized, shallowEqual);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                exact path=\"/\"\r\n                render={() => !isAuthorized ?\r\n                    <AuthPage/> :\r\n                    <RequestsPage/>\r\n                }/>\r\n        </Switch>\r\n    );\r\n};\r\n","import { SET_CURRENT_LANGUAGE } from './headerActions';\r\n\r\nexport const setCurrentLanguage = (payload) => {\r\n    return { type: SET_CURRENT_LANGUAGE, payload };\r\n};\r\n","export const SET_CURRENT_LANGUAGE = \"SET_CURRENT_LANGUAGE\";\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport Button from '../../../../shared/components/Button';\nimport { setCurrentLanguage } from '../../reducer/headerActionCreators';\n\n\nexport const LangSwitcher = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <div style={{'width': '100%'}}>\n            <span style={{'float': 'left', 'fontWeight': 'bold'}}>DEMO </span>\n            <span style={{'float': 'left', 'marginLeft': '5px'}}>[testUser, testPassword]</span>\n            <div style={{'float': 'right'}}>\n                <Button\n                    text='UA'\n                    classType='transparent'\n                    handleClick={() => dispatch(setCurrentLanguage('ua'))}\n                />\n                <span>|</span>\n                <Button\n                    text='EN'\n                    classType='transparent'\n                    handleClick={() => dispatch(setCurrentLanguage('en'))}\n                />\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Button from '../../../../shared/components/Button';\r\nimport { logoutRequestCreator } from '../../../AuthPage/reducer/authActionCreators';\r\nimport { clearData } from '../../../RequestsPage/reducer/requestsActionCreators';\r\n\r\nexport const LogoutContent = () => {\r\n    const username = useSelector(state => state.auth.username, shallowEqual);\r\n    const profileText = `Користувач: ${username}`;\r\n    const dispatch = useDispatch();\r\n    const handleClick = () => {\r\n        dispatch(logoutRequestCreator());\r\n        dispatch(clearData())\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span style={{'paddingRight': '20px'}}>{profileText}</span>\r\n            <Button\r\n                text='Вихід'\r\n                classType='transparent'\r\n                handleClick={handleClick}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport {shallowEqual, useSelector} from 'react-redux';\n\nimport './Header.scss'\nimport '../../../../shared/styles/scss/style.scss'\nimport { LangSwitcher } from '../LangSwitcher';\nimport { LogoutContent } from '../LogoutContent';\n\nexport const Header = () => {\n    const isAuthorized = useSelector(state => state.auth.isAuthorized, shallowEqual);\n\n    const headerContent = isAuthorized ?\n        <LogoutContent/> :\n        <LangSwitcher/>;\n\n    return (\n        <header className={'header'}>\n            {headerContent}\n        </header>\n    );\n};\n","import React from 'react';\r\nimport { Drawer } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport {\r\n    requestPageFormFieldsRequestCreator,\r\n    toggleDrawerStatus,\r\n} from '../../reducer/requestsActionCreators';\r\n\r\nexport const DrawerContainer = () => {\r\n    const drawerVisible = useSelector(store => store.requests.drawerActive);\r\n    const drawerOptions = useSelector(store => store.requests.drawerOptions);\r\n    const dispatch = useDispatch();\r\n\r\n    const userProcesses = drawerOptions.map(element => (\r\n            <p\r\n                key={element.key}\r\n                onClick={() => {\r\n                    dispatch(toggleDrawerStatus());\r\n                    dispatch(requestPageFormFieldsRequestCreator(element.key, element.name));\r\n                }}\r\n                style={{'cursor': 'pointer'}}\r\n            >{element.name}</p>\r\n        )\r\n    );\r\n\r\n    const onClose = () => {\r\n        dispatch(toggleDrawerStatus());\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            title=\"Новий запит\"\r\n            placement=\"right\"\r\n            closable={false}\r\n            onClose={onClose}\r\n            visible={drawerVisible}\r\n        >\r\n            {userProcesses}\r\n        </Drawer>\r\n    );\r\n};\r\n","export const typeConverter = {\r\n    string: 'text',\r\n    long: 'number',\r\n    file: 'file',\r\n    date: 'date',\r\n    boolean: 'checkbox',\r\n    enum: 'select',\r\n};\r\n","import React from 'react';\r\nimport { Formik, Form} from \"formik\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { v4 } from 'uuid';\r\n\r\nimport { typeConverter } from \"./typeConverter\";\r\nimport { SubmitContainer } from '../../../../shared/components/CustomFormFields/SubmitContainer';\r\nimport {\r\n    startNewProcessRequestCreator,\r\n    toggleModalStatus,\r\n} from '../../reducer/requestsActionCreators';\r\nimport { FormikField } from '../../../../shared/components/CustomFormFields/FormikField';\r\n\r\nexport const NewProcessForm = () => {\r\n    const dispatch = useDispatch();\r\n    const { formFields, key } = useSelector(store => store.requests.formOptions);\r\n\r\n    const initialValues = Object.fromEntries(formFields.map(element => element.type === 'boolean' ?\r\n        [ element.id, element.defaultValue ] :\r\n        [ element.id, '' ]));\r\n\r\n    const fieldTypes = Object.fromEntries(formFields.map(element => element.type === 'long' ?\r\n        [ element.id, 'double' ] :\r\n        element.type === 'enum' ?\r\n            [ element.id, 'string' ]:\r\n            [ element.id, element.type ]));\r\n\r\n    const fields = formFields.map(element => <FormikField\r\n        key={v4()}\r\n        type={typeConverter[element.type]}\r\n        name={element.id}\r\n        label={element.label}\r\n        placeholder={element.defaultValue}\r\n        options={element.options}\r\n    />);\r\n\r\n    const validate = values => {\r\n        const errors = {};\r\n        for (let key in values) {\r\n            if (!values[key]) {\r\n                errors[key] = 'required';\r\n            }\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    const onSubmit = (values, actions) => {\r\n        let processedData = {};\r\n        for (let key in values) {\r\n            processedData[key] = { value: values[key], type: fieldTypes[key] };\r\n        }\r\n        for (let key in processedData) {\r\n            if (processedData[key].type === 'date') {\r\n                let date = new Date(processedData[key].value);\r\n                let offset = date.getTimezoneOffset() / (-60);\r\n                let timezone = offset >= 10 ? `+${offset}00` : `+0${offset}00`;\r\n                processedData[key].value = date.toISOString().replace('Z', timezone);\r\n            }\r\n            if (processedData[key].type === 'file') {\r\n                processedData[key] = {\r\n                    value: processedData[key].value.base64file,\r\n                    type: 'file',\r\n                    valueInfo: {\r\n                        filename: processedData[key].value.filename,\r\n                        encoding: 'Base64',\r\n                    },\r\n                }\r\n            }\r\n        }\r\n        dispatch(startNewProcessRequestCreator(key, processedData));\r\n        dispatch(toggleModalStatus());\r\n        actions.resetForm({\r\n            values: {},\r\n        })\r\n    };\r\n\r\n    const formProps = {\r\n        initialValues,\r\n        onSubmit,\r\n        validate\r\n    };\r\n\r\n    return (\r\n        <Formik {...formProps} enableReinitialize>\r\n            <Form>\r\n                <div>\r\n                    {fields}\r\n                    <SubmitContainer text=\"Створити\"/>\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport { Modal } from 'antd';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleModalStatus } from '../../reducer/requestsActionCreators';\r\nimport { NewProcessForm } from '../NewProcessForm';\r\n\r\nexport const ModalContainer = () => {\r\n    const modalVisible = useSelector(store => store.requests.modalActive);\r\n    const { name } = useSelector(store => store.requests.formOptions);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch(toggleModalStatus());\r\n    };\r\n\r\n    const handleOk = () => {\r\n        dispatch(toggleModalStatus())\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            title={name}\r\n            visible={modalVisible}\r\n            onOk={handleOk}\r\n            centered={true}\r\n            onCancel={handleCancel}\r\n            footer={null}\r\n            width={350}\r\n        >\r\n            <NewProcessForm/>\r\n        </Modal>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nimport '../../../shared/styles/scss/style.scss';\r\nimport { AppRoutes } from '../../routes';\r\nimport { Header } from '../../../client/Header/components/Header';\r\nimport { DrawerContainer } from '../../../client/RequestsPage/components/DrawerContainer';\r\nimport { ModalContainer } from '../../../client/RequestsPage/components/ModalContainer';\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div className={'container app-wraper'}>\r\n            <div className={'app-header'}>\r\n                <Header/>\r\n            </div>\r\n            <div className={'app-content'}>\r\n                <AppRoutes/>\r\n            </div>\r\n            <DrawerContainer/>\r\n            <ModalContainer/>\r\n        </div>\r\n    );\r\n};\r\n","import {\r\n    LOGOUT,\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILED,\r\n    TOGGLE_AUTH_PAGE_FORM,\r\n} from './authActions';\r\n\r\nconst initialState = {\r\n    isAuthorized: false,\r\n    loading: false,\r\n    errorMessage: null,\r\n    forgetPassword: false,\r\n    username: null,\r\n    reminderActive: false\r\n};\r\n\r\nexport const authReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case LOGIN_REQUEST:\r\n            return { ...state, loading: true, errorMessage: null };\r\n        case LOGIN_SUCCESS:\r\n            return { ...state, isAuthorized: true, loading: false, username: payload, };\r\n        case LOGIN_FAILED:\r\n            const errorMessage = (payload === 401) ? 'невірний логін або пароль' : `помилка серверу: ${payload}`;\r\n            return { ...state, isAuthorized: false, loading: false, errorMessage };\r\n        case LOGOUT:\r\n            return { ...state, isAuthorized: false, userName: null, errorMessage: null };\r\n        case TOGGLE_AUTH_PAGE_FORM:\r\n            return { ...state, reminderActive: !state.reminderActive, errorMessage: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {\r\n    CLEAR_DATA,\r\n    REQUEST_TABLE_DATA,\r\n    SET_DRAWER_OPTIONS,\r\n    SET_FORM_OPTIONS,\r\n    SET_TABLE_DATA,\r\n    TOGGLE_DRAWER_STATUS,\r\n    TOGGLE_MODAL_STATUS,\r\n} from './requestsActions';\r\n\r\n\r\nconst initialState = {\r\n    tableData: [],\r\n    tableLoading: false,\r\n    drawerActive: false,\r\n    drawerOptions: [],\r\n    modalActive: false,\r\n    formOptions: {},\r\n};\r\n\r\nexport const requestsReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case REQUEST_TABLE_DATA:\r\n            return { ...state, tableLoading: true };\r\n        case SET_TABLE_DATA:\r\n            return { ...state, tableData: payload, tableLoading: false };\r\n        case SET_DRAWER_OPTIONS:\r\n            return { ...state, drawerOptions: payload };\r\n        case TOGGLE_DRAWER_STATUS:\r\n            return { ...state, drawerActive: !state.drawerActive };\r\n        case SET_FORM_OPTIONS:\r\n            return { ...state, formOptions: payload };\r\n        case TOGGLE_MODAL_STATUS:\r\n            return { ...state, modalActive: !state.modalActive };\r\n        case CLEAR_DATA:\r\n            return { ...state, processesId: [], tasks: [], processesDefinitions: [], formFields: [], formTitle: '', formKey: ''};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { SET_CURRENT_LANGUAGE } from './headerActions';\r\n\r\nconst initialState = {\r\n    currentLanguage: 'ua',\r\n};\r\n\r\nexport const headerReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case SET_CURRENT_LANGUAGE:\r\n            return { ...state, currentLanguage: payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport { authReducer } from '../../client/AuthPage/reducer/authReducer'\r\nimport { requestsReducer } from '../../client/RequestsPage/reducer/requestsReducer';\r\nimport { headerReducer } from '../../client/Header/reducer/headerReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    requests: requestsReducer,\r\n    header: headerReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport * as serviceWorker from './service-worker';\nimport reportWebVitals from './report-web-vitals';\nimport { App } from './app/componets/App';\nimport store from './app/store/store';\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}