{"version":3,"sources":["service-worker.js","report-web-vitals.js","client/Auth/reducer/authReducer.js","client/Auth/components/AuthForm/authFormFields.js","shared/components/Button/types.js","shared/components/Button/Button.jsx","shared/components/SubmitContainer/SubmitContainer.jsx","shared/components/ErrorMessage/ErrorMessage.jsx","services/base-http.service.js","client/Auth/reducer/authActionCreators.js","client/Auth/services/auth.service.js","shared/components/FormikField/FormikField.jsx","shared/components/FormikField/base64FileConverter.js","client/Auth/components/AuthForm/AuthForm.jsx","client/Auth/pages/AuthPage/AuthPage.jsx","client/Processes/reducer/processesReducer.js","client/Processes/reducer/processesActionCreators.js","client/Processes/services/processes.service.js","client/Processes/components/TableContainer/TableContainer.jsx","client/Processes/pages/ProcessesPage/ProcessesPage.jsx","app/routes/AppRoutes.jsx","client/Header/components/LangSwitcher/LangSwitcher.jsx","client/Header/components/LogoutContent/LogoutContent.jsx","client/Header/components/Header/Header.jsx","client/Processes/components/DrawerContainer/DrawerContainer.jsx","client/Processes/components/NewProcessForm/typeConverter.js","client/Processes/components/NewProcessForm/NewProcessForm.jsx","client/Processes/components/NewProcesessModal/NewProcesessModal.jsx","client/Processes/components/ProcessSteps/ProcessSteps.jsx","client/Processes/components/StepsModal/StepsModal.jsx","app/componets/App/App.jsx","app/store/root-reducer.js","app/store/store.jsx","index.jsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","authSlice","createSlice","name","initialState","isAuthorized","isFetching","reminderActive","username","errorStatus","reducers","loginRequest","state","fetchLoginSuccess","action","payload","fetchLoginFailed","logout","userName","toggleAuthPageForm","actions","authFormFields","loginForm","fields","type","id","v4","reminderForm","types","basic","transparent","Button","props","text","classType","additionalClass","handleClick","disabled","disabledClass","className","onClick","defaultProps","SubmitContainer","useFormikContext","errors","touched","errorBool","Object","keys","length","touchBool","ErrorMessage","BaseHttpService","BASE_URL","process","_accessToken","_tenantId","_username","_handle401","removeTenantData","useHistory","push","_getCommonOptions","accessToken","loadAccessToken","headers","saveTenantData","tenantId","sessionStorage","setItem","removeItem","endpoint","options","assign","this","axios","get","res","data","catch","error","_handleHttpError","post","status","put","delete","patch","response","getItem","loadUsername","loadTenantId","authServ","password","btoa","toString","FormikField","label","useField","field","helpers","currentLang","useTranslation","i18n","language","labelClassName","fieldClassName","labelField","htmlFor","currentField","value","map","key","onChange","event","file","currentTarget","files","filename","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","base64FileConverter","base64file","split","processedFile","setValue","AuthForm","dispatch","useDispatch","useSelector","auth","shallowEqual","t","authFormData","submitText","errorText","initialValues","fromEntries","element","required","formProps","onSubmit","values","console","log","a","login","fetchLoginRequest","enableReinitialize","AuthPage","processesSlice","tableLoading","drawerActive","newProcessModalActive","stepsModalActive","processStepsData","processSteps","currentStepIndex","tableData","drawerOptions","formOptions","formFields","requestTableData","setTableData","setDrawerOptions","toggleDrawerStatus","setFormOptions","toggleNewProcessModalStatus","toggleStepsModalStatus","setProcessSteps","clearData","processesService","body","variables","sorting","withVariablesInReturn","processesIdRequestCreator","getProcessesId","number","slice","processKey","definitionId","processesId","processesStatusRequestCreator","tasks","taskRequests","getProcessStatus","all","responses","task","find","executionId","created","processesNamesRequestCreator","err","processesIdUpdated","processesKeysData","uniKey","Array","from","Set","getProcessXML","parsedXML","bpmn20Xml","parseString","processKeyData","forEach","item","year","month","day","index","parseDate","Date","parse","toLocaleString","TableContainer","dataIndex","dataSource","processes","loading","useState","searchText","setSearchText","searchedColumn","setSearchedColumn","searchInput","handleSearch","selectedKeys","confirm","handleReset","clearFilters","getFilter","filterElements","filterStatus","filterName","filterDropdown","setSelectedKeys","style","padding","ref","node","placeholder","e","target","onPressEnter","width","marginBottom","display","icon","SearchOutlined","size","filterIcon","filtered","color","undefined","onFilter","record","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","highlightStyle","backgroundColor","searchWords","autoEscape","textToHighlight","columns","title","filters","indexOf","defaultSortOrder","sorter","b","getDate","date","dateParts","pagination","position","onRow","rowIndex","processStepsRequestCreator","rowClassName","ProcessesPage","hiddenClass","useEffect","getProcessesDefinitions","processesDefinitions","JSON","stringify","AppRoutes","exact","path","LangSwitcher","float","fontWeight","marginLeft","changeLanguage","LogoutContent","profileText","Header","headerContent","DrawerContainer","drawerVisible","userProcesses","placement","closable","onClose","typeConverter","javaType","NewProcessForm","defaultValue","fieldTypes","validate","formKey","formData","processedData","offset","getTimezoneOffset","timezone","toISOString","replace","valueInfo","encoding","startNewProcess","resetForm","NewProcesessModal","modalVisible","onOk","centered","onCancel","footer","ProcessSteps","Step","Steps","stepsItems","description","direction","current","StepsModal","App","rootReducer","combineReducers","reducer","middleware","getDefaultMiddleware","serializableCheck","store","configureStore","devTools","i18next","init","interpolation","escapeValue","lng","resources","uk","common","common_uk","en","common_en","StrictMode","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a154d787.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","const reportWebVitals = onPerfEntry => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n      import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n        getCLS(onPerfEntry);\r\n        getFID(onPerfEntry);\r\n        getFCP(onPerfEntry);\r\n        getLCP(onPerfEntry);\r\n        getTTFB(onPerfEntry);\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default reportWebVitals;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isAuthorized: false,\r\n        isFetching: false, //unused property, required in further development\r\n        reminderActive: false,\r\n        username: null,\r\n        errorStatus: null\r\n    },\r\n    reducers: {\r\n        loginRequest: state => ({ ...state, isFetching: true, errorStatus: null }),\r\n        fetchLoginSuccess: (state, action) =>({ ...state, isAuthorized: true, isFetching: false, username: action.payload }),\r\n        fetchLoginFailed: (state, action) => ({ ...state, isAuthorized: false, isFetching: false, errorStatus: action.payload }),\r\n        logout: state => ({ ...state, isAuthorized: false, userName: null, errorStatus: null }),\r\n        toggleAuthPageForm: state => ({ ...state, reminderActive: !state.reminderActive, errorStatus: null })\r\n    }\r\n});\r\n\r\nexport const {\r\n    loginRequest,\r\n    fetchLoginSuccess,\r\n    fetchLoginFailed,\r\n    logout,\r\n    toggleAuthPageForm\r\n} = authSlice.actions;\r\n\r\n","import { v4 } from 'uuid';\r\n\r\nexport const authFormFields = {\r\n    loginForm: {\r\n        fields: [\r\n            {\r\n                type: \"text\",\r\n                name: \"username\",\r\n                id: v4(),\r\n            },\r\n            {\r\n                type: \"password\",\r\n                name: \"password\",\r\n                id: v4(),\r\n            },\r\n        ],\r\n    },\r\n    reminderForm: {\r\n        fields: [\r\n            {\r\n                type: \"text\",\r\n                name: \"username\",\r\n                id: v4(),\r\n            },\r\n            {\r\n                type: \"email\",\r\n                name: \"email\",\r\n                id: v4(),\r\n            },\r\n        ],\r\n    },\r\n};\r\n","export const types = {\r\n    basic: \"button-basic\",\r\n    transparent: \"button-transparent\",\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {types} from \"./types\"\r\n\r\nimport './Button.scss'\r\n\r\nconst Button = props => {\r\n    const { text, type, classType, additionalClass, handleClick, disabled } = props;\r\n    const disabledClass = disabled ? 'button-disabled' : '';\r\n    const className = `button ${types[classType]} ${additionalClass} ${disabledClass}`;\r\n\r\n    return (\r\n        <button\r\n            type={type}\r\n            className={className}\r\n            onClick={handleClick}\r\n            disabled={disabled}\r\n        >\r\n            {text}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.defaultProps = {\r\n    additionalClass: '',\r\n    type: 'button',\r\n    disabled: false\r\n};\r\n\r\nButton.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n    type: PropTypes.oneOf([\r\n        'button',\r\n        'submit',\r\n        'reset',\r\n    ]),\r\n    classType: PropTypes.oneOf([\r\n        'basic',\r\n        'transparent',\r\n    ]).isRequired,\r\n    additionalClass: PropTypes.string,\r\n    handleClick: PropTypes.func,\r\n    disabled: PropTypes.bool\r\n};\r\n","import React from \"react\";\r\nimport { useFormikContext } from \"formik\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Button from '../Button';\r\n\r\nimport './SubmitContainer.scss'\r\n\r\nexport const SubmitContainer = ({text}) => {\r\n    const {errors, touched} = useFormikContext();\r\n    let errorBool = Boolean(Object.keys(errors).length);\r\n    let touchBool = Boolean(!Object.keys(touched).length);\r\n\r\n    return (\r\n        <div className={'form-submit-container'}>\r\n            <Button\r\n                text={text}\r\n                classType='basic'\r\n                type={'submit'}\r\n                disabled={errorBool || touchBool}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nSubmitContainer.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './ErrorMessage.scss'\r\n\r\nexport const ErrorMessage = ({text}) => {\r\n\r\n    return (\r\n        <div className={'error-message'}>\r\n            <span>{text}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nErrorMessage.propTypes = {\r\n    text: PropTypes.string.isRequired,\r\n};\r\n","import axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport default class BaseHttpService {\r\n\r\n    BASE_URL = `${process.env.REACT_APP_BACKEND_URL}`;\r\n    _accessToken = null;\r\n    _tenantId = null;\r\n    _username = null;\r\n\r\n    async get(endpoint = \"\", options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .get(`${this.BASE_URL}/${endpoint}`, options)\r\n            .then((res) => res.data)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async post(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .post(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .then(({data, status}) => {\r\n                return {data, status}\r\n            })\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async put(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .put(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async delete(endpoint = \"\", options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .delete(`${this.BASE_URL}/${endpoint}`, options)\r\n            .then((res) => res.data)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    async patch(endpoint = \"\", data = {}, options = {}) {\r\n        Object.assign(options, this._getCommonOptions());\r\n        return axios\r\n            .patch(`${this.BASE_URL}/${endpoint}`, data, options)\r\n            .catch((error) => this._handleHttpError(error));\r\n    }\r\n\r\n    _handleHttpError(error) {\r\n        const { status } = error.response;\r\n        if (status !== 401) {\r\n            throw error;\r\n        } else {\r\n            return this._handle401();\r\n        }\r\n    }\r\n\r\n    _handle401 = () => {\r\n        this._accessToken = null;\r\n        this._tenantId = null;\r\n        this._username = null;\r\n        this.removeTenantData();\r\n        const history = useHistory();\r\n        history.push(\"/\");\r\n    };\r\n\r\n    _getCommonOptions = () => {\r\n        const { accessToken } = this.loadAccessToken();\r\n\r\n        return {\r\n            headers: {\r\n                'Authorization': `Basic ${accessToken}`,\r\n            },\r\n        };\r\n    };\r\n\r\n    get accessToken() {\r\n        return this._accessToken ? this._accessToken : this.loadAccessToken();\r\n    }\r\n\r\n    loadAccessToken() {\r\n        const accessToken = sessionStorage.getItem(\"accessToken\");\r\n        this._accessToken = accessToken;\r\n\r\n        return {\r\n            accessToken,\r\n        };\r\n    }\r\n\r\n    get username() {\r\n        return this._username ? this._username : this.loadUsername();\r\n    }\r\n\r\n    loadUsername() {\r\n        const username = sessionStorage.getItem(\"username\");\r\n        this._username = username;\r\n\r\n        return {\r\n            username,\r\n        };\r\n    }\r\n\r\n    get tenantId() {\r\n        return this._tenantId ? this._tenantId : this.loadTenantId();\r\n    }\r\n\r\n    loadTenantId() {\r\n        const tenantId = sessionStorage.getItem(\"tenantId\");\r\n        this._tenantId = tenantId;\r\n\r\n        return {\r\n            tenantId,\r\n        };\r\n    }\r\n\r\n    saveTenantData = (username, tenantId, accessToken) => {\r\n        this._username = username;\r\n        this._accessToken = accessToken;\r\n        this._tenantId = tenantId;\r\n        sessionStorage.setItem(\"username\", username);\r\n        sessionStorage.setItem(\"tenantId\", tenantId);\r\n        sessionStorage.setItem(\"accessToken\", accessToken);\r\n\r\n        return {\r\n            username,\r\n            tenantId,\r\n            accessToken\r\n        };\r\n    };\r\n\r\n    removeTenantData = () => {\r\n        sessionStorage.removeItem(\"username\");\r\n        sessionStorage.removeItem(\"tenantId\");\r\n        sessionStorage.removeItem(\"accessToken\");\r\n    };\r\n}\r\n","import AuthService from '../services/auth.service';\r\nimport {\r\n    loginRequest,\r\n    fetchLoginSuccess,\r\n    fetchLoginFailed,\r\n    logout\r\n} from './authReducer';\r\n\r\nconst authServ = new AuthService();\r\n\r\nexport const fetchLoginRequest = ({ username, password }) => {\r\n    return async ( dispatch ) => {\r\n        dispatch(loginRequest());\r\n        try {\r\n            await authServ.login({ username, password });\r\n            dispatch(fetchLoginSuccess(username));\r\n        } catch (err) {\r\n            if (err.name === 'InvalidCharacterError') {\r\n                dispatch(fetchLoginFailed(401));\r\n            } else {\r\n                dispatch(fetchLoginFailed(err.response.status));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const logoutRequestCreator = () => {\r\n    return async ( dispatch ) => {\r\n        await authServ.logout();\r\n        dispatch(logout());\r\n    }\r\n};\r\n\r\n\r\n","import axios from 'axios';\r\nimport BaseHttpService from '../../../services/base-http.service';\r\n\r\nexport default class AuthService extends BaseHttpService {\r\n    async login({ username, password }) {\r\n        const accessToken = `${btoa(`${username.toString()}:${password.toString()}`)}`;\r\n        const options = {\r\n            headers: {\r\n                'Authorization': `Basic ${accessToken}`,\r\n            },\r\n        };\r\n        const { data } = await axios.get(`${this.BASE_URL}/tenant?userMember=${username}`, options);\r\n        const tenantId = data[0].id;\r\n        this.saveTenantData(username, tenantId, accessToken);\r\n        return data[0];\r\n    }\r\n\r\n    logout() {\r\n        this.removeTenantData();\r\n    }\r\n};\r\n","import React from \"react\";\nimport { useField } from \"formik\";\nimport { useTranslation } from 'react-i18next';\n\nimport { base64FileConverter } from './base64FileConverter'\n\nimport './FormikFields.scss';\n\nexport const FormikField = ({ label, options, ...props }) => {\n    const {type, name} = props;\n    const [field, , helpers] = useField(props);\n    const { i18n } = useTranslation('common');\n    const currentLang = i18n.language;\n    const labelClassName = type === 'checkbox' ?\n        'form-label-secondary' :\n        'form-label-primary';\n    const fieldClassName = type === 'checkbox' ?\n        'form-field-secondary' :\n        type === 'file' ?\n            `form-field-file--${currentLang}` :\n            'form-field-primary';\n    const labelField = <label className={labelClassName} htmlFor={name}>{label}</label>;\n    const currentField = options ?\n        <select className={fieldClassName} {...field} {...props}>\n            <option value={''}/>\n            {options.map(({id, name}) => <option value={id} key={id}>{name}</option>)}\n        </select> :\n        type === 'file' ?\n            <input\n                className={fieldClassName}\n                id={name}\n                {...props}\n                onChange={(event) => {\n                    const file = event.currentTarget.files[0];\n                    const filename = file.name;\n                    base64FileConverter(file)\n                        .then((result) => {\n                            const base64file = result.split(',')[1];\n                            const processedFile = {\n                                filename,\n                                base64file,\n                            };\n                            return processedFile;\n                        })\n                        .then((processedFile) => helpers.setValue(processedFile));\n                }}\n            /> :\n            <input\n                className={fieldClassName}\n                id={name}\n                {...field}\n                {...props}\n            />;\n    return (\n        <div>\n            {type !== 'checkbox' ? labelField : null}\n            {currentField}\n            {type === 'checkbox' ? labelField : null}\n        </div>\n    );\n};\n\n","export const base64FileConverter = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = error => reject(error);\r\n    });\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik, Form } from \"formik\";\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { authFormFields } from \"./authFormFields\";\r\nimport { SubmitContainer } from '../../../../shared/components/SubmitContainer/SubmitContainer';\r\nimport { ErrorMessage } from '../../../../shared/components/ErrorMessage';\r\nimport { fetchLoginRequest } from '../../reducer/authActionCreators';\r\nimport { FormikField } from '../../../../shared/components/FormikField/FormikField';\r\n\r\nexport const AuthForm = ({reminderActive}) => {\r\n    const dispatch = useDispatch();\r\n    const errorStatus = useSelector(({auth}) => auth.errorStatus, shallowEqual);\r\n    const {t} = useTranslation('common');\r\n    const authFormData = reminderActive ?\r\n        authFormFields.reminderForm :\r\n        authFormFields.loginForm;\r\n    const submitText = reminderActive ?\r\n        t('authPage.remind') :\r\n        t('authPage.login');\r\n    const errorText = !errorStatus ?\r\n        '' :\r\n        (errorStatus === 401) ?\r\n            t('authPage.loginError') :\r\n            `${t('authPage.serverError')}: ${errorStatus}`;\r\n\r\n    const initialValues = Object.fromEntries(authFormData.fields.map(element => [ element.name, '' ]));\r\n\r\n    const fields = authFormData.fields.map(element => <FormikField\r\n        key={element.id}\r\n        type={element.type}\r\n        name={element.name}\r\n        required\r\n        label={t(`authPage.${element.name}`)}\r\n    />);\r\n\r\n    const onSubmit = (values)=> {\r\n        if (reminderActive) {\r\n            console.log(values);\r\n            console.log(\"login: testUser, password: testPassword\");\r\n        } else {\r\n            dispatch(fetchLoginRequest(values));\r\n        }\r\n    };\r\n\r\n    const formProps = {\r\n        initialValues,\r\n        onSubmit\r\n    };\r\n\r\n    return (\r\n        <Formik {...formProps} enableReinitialize>\r\n            <Form>\r\n                <div>\r\n                    {fields}\r\n                    <ErrorMessage text={errorText} />\r\n                    <SubmitContainer text={submitText} />\r\n                </div>\r\n            </Form>\r\n        </Formik>\r\n    );\r\n};\r\n\r\nAuthForm.propTypes = {\r\n    reminderActive: PropTypes.bool.isRequired\r\n};\r\n","import React from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { toggleAuthPageForm } from '../../reducer/authReducer';\r\nimport { AuthForm } from '../../components/AuthForm';\r\nimport Button from '../../../../shared/components/Button';\r\n\r\nimport './AuthPage.scss'\r\n\r\nexport const AuthPage = () => {\r\n    const reminderActive = useSelector(({auth}) => auth.reminderActive, shallowEqual);\r\n    const dispatch = useDispatch();\r\n    const {t} = useTranslation('common');\r\n\r\n    const handleClick = () => dispatch(toggleAuthPageForm());\r\n\r\n    return (\r\n        <div className={'auth-page'}>\r\n            <div className={'auth-page__form'}>\r\n                <AuthForm reminderActive={reminderActive}/>\r\n                <Button\r\n                    text={reminderActive ? t('authPage.return') : t('authPage.remind')}\r\n                    classType='transparent'\r\n                    additionalClass={'auth-page__reminder'}\r\n                    handleClick={handleClick}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const processesSlice = createSlice({\n    name: 'processes',\n    initialState: {\n        tableLoading: false,\n        drawerActive: false,\n        newProcessModalActive: false,\n        stepsModalActive: false,\n        processStepsData: {\n            processSteps: [],\n            currentStepIndex: 0\n        },\n        tableData: [],\n        drawerOptions: [],\n        formOptions: {\n            formFields: [],\n            name: null,\n            key: null\n        },\n    },\n    reducers: {\n        requestTableData: state => ({ ...state, tableLoading: true }),\n        setTableData: (state, action) => ({ ...state, tableData: action.payload, tableLoading: false }),\n        setDrawerOptions: (state, action) => ({ ...state, drawerOptions: action.payload }),\n        toggleDrawerStatus: state => ({ ...state, drawerActive: !state.drawerActive }),\n        setFormOptions: (state, action) => ({ ...state, formOptions: action.payload }),\n        toggleNewProcessModalStatus: state => ({ ...state, newProcessModalActive: !state.newProcessModalActive }),\n        toggleStepsModalStatus: state => ({ ...state, stepsModalActive: !state.stepsModalActive }),\n        setProcessSteps: (state, action) => ({ ...state, processStepsData: action.payload }),\n        clearData: state => ({ ...state,\n            tableData: [],\n            drawerOptions: [],\n            formOptions: {\n                formFields: [],\n                name: null,\n                key: null\n            }\n        }),\n    }\n});\n\nexport const {\n    requestTableData,\n    setTableData,\n    setDrawerOptions,\n    toggleDrawerStatus,\n    setFormOptions,\n    toggleNewProcessModalStatus,\n    toggleStepsModalStatus,\n    setProcessSteps,\n    clearData\n} = processesSlice.actions;\n\n","import { parseString } from 'xml2js'\n\nimport {\n    requestTableData,\n    setTableData,\n    setDrawerOptions,\n    setFormOptions,\n    toggleNewProcessModalStatus, toggleStepsModalStatus, setProcessSteps,\n} from './processesReducer';\nimport ProcessesService from '../services/processes.service';\n\nconst processesService = new ProcessesService();\n\nexport const processesIdRequestCreator = () => {\n    return async ( dispatch ) => {\n        dispatch(requestTableData());\n        try {\n            await processesService.getProcessesId()\n                .then((res) => res.map(element => ({\n                    id: element.id,\n                    number: element.id.slice(0, 13),\n                    processKey: element.definitionId.split(':')[0]\n                })))\n                .then((processesId) => dispatch(processesStatusRequestCreator(processesId)));\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const processesStatusRequestCreator = (processesId) => {\n    return async ( dispatch ) => {\n        try {\n            const tasks = [...processesId];\n            const taskRequests = processesId.map(element => processesService.getProcessStatus(element.id));\n            Promise.all(taskRequests)\n                .then(responses => responses.map(\n                    ([response]) => {\n                        const task = tasks.find(({id}) => id === response.executionId);\n                        return {...task, created: response.created, status: response.name};\n                    }))\n                .then(result => {\n                    dispatch(processesNamesRequestCreator(result))\n                })\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const processesNamesRequestCreator = (processesIdUpdated) => {\n    return async ( dispatch ) => {\n        try {\n            let tableData = [...processesIdUpdated];\n            let processesKeysData = [];\n            const keys = tableData.map(({processKey}) => processKey);\n            const uniKey = Array.from(new Set(keys));\n            const taskRequests = uniKey.map(element => processesService.getProcessXML(element));\n            Promise.all(taskRequests)\n                .then(responses => responses.map(\n                    ({bpmn20Xml}) => {\n                        let parsedXML;\n                        parseString(bpmn20Xml, (err, result) => {\n                            parsedXML = result;\n                        });\n                        const processKeyData = parsedXML['bpmn:definitions']['bpmn:process'][0]['$'];\n                        processesKeysData.push(processKeyData);\n                        return processesKeysData\n                    })\n                )\n                .then(result => {\n                    processesKeysData.forEach((item)=> {\n                        tableData = tableData.map(element => element.processKey === item.id ?\n                            {...element, name: item.name} : element);\n                    });\n                    tableData = tableData.map(({id, ...rest}) => rest);\n                    const options = {\n                        year: 'numeric',\n                        month: 'numeric',\n                        day: 'numeric',\n                    };\n                    tableData.forEach((item, index) => {\n                        item.key = index+1;\n                        const parseDate = new Date(Date.parse(item.created));\n                        item.created = parseDate.toLocaleString(\"ru\", options);\n                    });\n                    dispatch(setTableData(tableData))\n                })\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const drawerOptionsRequestCreator = () => {\n    return async ( dispatch ) => {\n        try {\n            await processesService.getProcessesDefinitions()\n                .then((res) => res.map(({key, name}) => ({\n                    key,\n                    name\n                })))\n                .then((processesDefinitions) => {\n                    const drawerOptions = Array.from(new Set(processesDefinitions.map(JSON.stringify))).map(JSON.parse);\n                    dispatch(setDrawerOptions(drawerOptions));\n                });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const requestPageFormFieldsRequestCreator = (key, name) => {\n    return async ( dispatch ) => {\n        try {\n            await processesService.getProcessXML(key)\n                .then(({bpmn20Xml}) => {\n                    let parsedXML;\n                    parseString(bpmn20Xml, (err, result) => {\n                        parsedXML = result;\n                    });\n                    const fieldsData = parsedXML['bpmn:definitions']['bpmn:process'][0]['bpmn:startEvent'][0]['bpmn:extensionElements'][0]['camunda:formData'][0]['camunda:formField'];\n                    const formFields = fieldsData.map(element => element['camunda:value'] ?\n                        {...element['$'], options: element['camunda:value'].map(element => element['$'])} :\n                        element['$']);\n                    dispatch(setFormOptions({formFields, name, key}));\n                    dispatch(toggleNewProcessModalStatus())\n                });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const processStepsRequestCreator = (key, status) => {\n    return async ( dispatch ) => {\n        try {\n            await processesService.getProcessXML(key)\n                .then(({bpmn20Xml}) => {\n                    let parsedXML;\n                    parseString(bpmn20Xml, (err, result) => {\n                        parsedXML = result;\n                    });\n                    const stepsData = parsedXML['bpmn:definitions']['bpmn:process'][0]['bpmn:userTask'];\n                    const processSteps = stepsData.map(element => element['$']['name']);\n                    const currentStepIndex = processSteps.indexOf(status);\n                    dispatch(setProcessSteps({processSteps, currentStepIndex}));\n                    dispatch(toggleStepsModalStatus());\n                    console.log()\n                });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n\nexport const startNewProcessRequestCreator = (formKey, formData) => {\n    return async ( dispatch ) => {\n        try {\n            await processesService.startNewProcess(formKey, formData)\n                .then(res => {\n                    if (res.status === 200) {\n                        dispatch(processesIdRequestCreator());\n                    }\n                });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n};\n","import BaseHttpService from '../../../services/base-http.service';\n\nexport default class ProcessesIdService extends BaseHttpService {\n    async getProcessesId() {\n        const endpoint = 'process-instance';\n        const {username} = this.loadUsername();\n        const body = {\n            variables:\n                [\n                    {\n                        'name': 'Initiator',\n                        'operator': 'eq',\n                        'value': `${username}`,\n                    }\n                ],\n            sorting:\n                [\n                    {\n                        'sortBy': 'definitionKey',\n                        'sortOrder': 'asc',\n                    },\n                    {\n                        'sortBy': 'instanceId',\n                        'sortOrder': 'desc',\n                    }\n                ],\n        };\n        const {data} = await this.post(endpoint, body);\n        return data;\n    }\n\n    async getProcessStatus(id) {\n        const endpoint = `task?processInstanceId=${id}`;\n        const response = await this.get(endpoint);\n        return response;\n    }\n\n    async getProcessXML(key) {\n        const {tenantId} = this.loadTenantId();\n        const endpoint = `process-definition/key/${key}/tenant-id/${tenantId}/xml`;\n        const response = await this.get(endpoint);\n        return response;\n    }\n\n    async getProcessesDefinitions() {\n        const {tenantId} = this.loadTenantId();\n        const endpoint = `process-definition?tenantIdIn=${tenantId}`;\n        const response = await this.get(endpoint);\n        return response;\n    }\n\n    async startNewProcess(key, data) {\n        const {tenantId} = this.loadTenantId();\n        const body = {\n            variables: data,\n            withVariablesInReturn: true\n        };\n        const endpoint = `process-definition/key/${key}/tenant-id/${tenantId}/start`;\n        const response = this.post(endpoint, body);\n        return response;\n    }\n};\n\n","import React, {useState} from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Table, Input, Button, Space } from 'antd';\nimport 'antd/dist/antd.css';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { useTranslation } from 'react-i18next';\nimport { processStepsRequestCreator } from '../../reducer/processesActionCreators';\n\nexport const TableContainer = () => {\n    const dataSource = useSelector(({processes}) => processes.tableData, shallowEqual);\n    const loading = useSelector(({processes}) => processes.tableLoading, shallowEqual);\n    const {t} = useTranslation('common');\n    const dispatch = useDispatch();\n    const [searchText, setSearchText] = useState('');\n    const [searchedColumn, setSearchedColumn] = useState('');\n    let searchInput = null;\n\n    const getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Space>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n                        icon={<SearchOutlined />}\n                        size=\"small\"\n                        style={{ width: 90 }}\n                    >\n                        Search\n                    </Button>\n                    <Button onClick={() => handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                        Reset\n                    </Button>\n                </Space>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n        onFilter: (value, record) =>\n            record[dataIndex]\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n                : '',\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => searchInput.select(), 100);\n            }\n        },\n        render: text =>\n            searchedColumn === dataIndex ? (\n                <Highlighter\n                    highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                    searchWords={[searchText]}\n                    autoEscape\n                    textToHighlight={text ? text.toString() : ''}\n                />\n            ) : (\n                text\n            ),\n    });\n\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\n        confirm();\n        setSearchText(selectedKeys[0]);\n        setSearchedColumn(dataIndex);\n\n    };\n\n    const handleReset = clearFilters => {\n        clearFilters();\n        setSearchText('');\n    };\n\n    const getFilter = (data, key) => {\n        const filterElements = data.map(element => element[key]);\n        const uniFilterElements = Array.from(new Set(filterElements));\n        return (\n            uniFilterElements.map(element => ({text: element, value: element}))\n        );\n    };\n    const filterStatus = getFilter(dataSource, 'status');\n    const filterName = getFilter(dataSource, 'name');\n    const {filterDropdown, filterIcon, onFilter, onFilterDropdownVisibleChange, render} = getColumnSearchProps('number');\n\n    const columns = [\n        {\n            title: t('requestPage.tableColNumber'),\n            dataIndex: 'number',\n            key: 'number',\n            className: 'table_text',\n            filterDropdown,\n            filterIcon,\n            onFilter,\n            onFilterDropdownVisibleChange,\n            render\n        },\n        {\n            title: t('requestPage.tableColStatus'),\n            dataIndex: 'status',\n            key: 'status',\n            filters: filterStatus,\n            className: 'table_text',\n            onFilter: (value, record) => record.status.indexOf(value) === 0,\n        },\n        {\n            title: t('requestPage.tableColCreated'),\n            dataIndex: 'created',\n            key: 'created',\n            className: 'table_text',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => {\n                const getDate = (date) => {\n                    const dateParts = date.split('.');\n                    return new Date(dateParts[2], dateParts[1]-1, dateParts[0]);\n                };\n                let dateA = getDate(a.created);\n                let dateB = getDate(b.created);\n                return(dateA - dateB)\n            }\n        },\n        {\n            title: t('requestPage.tableColRequest'),\n            dataIndex: 'name',\n            key: 'name',\n            filters: filterName,\n            className: 'table_text',\n            onFilter: (value, record) => record.name.indexOf(value) === 0,\n        },\n    ];\n\n    return (\n        <Table\n            dataSource={dataSource}\n            columns={columns}\n            pagination={{position: ['bottomCenter']}}\n            size=\"middle\"\n            loading={loading}\n            onRow={({processKey, status}, rowIndex) => {\n                return {\n                    onClick: event => {\n                        dispatch(processStepsRequestCreator(processKey, status))\n                    },\n                };\n            }}\n            rowClassName={(record, index) => 'custom-row-style'}\n        />\n    );\n};\n","import React, { useEffect } from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n    drawerOptionsRequestCreator,\r\n    processesIdRequestCreator,\r\n} from '../../reducer/processesActionCreators';\r\nimport { toggleDrawerStatus } from '../../reducer/processesReducer';\r\nimport { TableContainer } from '../../components/TableContainer';\r\n\r\nimport './ProcessesPage.scss'\r\n\r\nexport const ProcessesPage = () => {\r\n    const visible = useSelector(({processes}) => processes.drawerActive, shallowEqual);\r\n    const {t} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n    const hiddenClass = visible ? 'hidden' : '';\r\n    const handleDrawerClick = () => {dispatch(toggleDrawerStatus())};\r\n\r\n    useEffect(() => {\r\n        dispatch(processesIdRequestCreator());\r\n        dispatch(drawerOptionsRequestCreator())\r\n    }, []);\r\n\r\n    return (\r\n        <div className={'processes-page'}>\r\n            <TableContainer/>\r\n            <div\r\n                className={`processes-page__new-request ${hiddenClass}`}\r\n                onClick={handleDrawerClick}\r\n            >\r\n                <span>{t('requestPage.newRequest')}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { shallowEqual, useSelector } from 'react-redux';\r\n\r\nimport { AuthPage } from '../../client/Auth/pages/AuthPage';\r\nimport { ProcessesPage } from '../../client/Processes/pages/ProcessesPage';\r\n\r\nexport const AppRoutes = () => {\r\n    const isAuthorized = useSelector(({auth}) => auth.isAuthorized, shallowEqual);\r\n\r\n    return (\r\n        <Switch>\r\n            <Route\r\n                exact path=\"/\"\r\n                render={() => !isAuthorized ?\r\n                    <AuthPage/> :\r\n                    <ProcessesPage/>\r\n                }/>\r\n        </Switch>\r\n    );\r\n};\r\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '../../../../shared/components/Button';\n\nexport const LangSwitcher = () => {\n    const {i18n} = useTranslation('common');\n\n    return (\n        <div style={{ width: '100%' }}>\n            <span style={{ float: 'left', fontWeight: 'bold' }}>DEMO</span>\n            <span style={{ float: 'left', marginLeft: '5px'}}>use \"testUser\", \"testPassword\" to authorize</span>\n            <div style={{float: 'right'}}>\n                <Button\n                    text='UA'\n                    classType='transparent'\n                    handleClick={() => i18n.changeLanguage('uk')}\n                />\n                <span>|</span>\n                <Button\n                    text='EN'\n                    classType='transparent'\n                    handleClick={() => i18n.changeLanguage('en')}\n                />\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\r\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Button from '../../../../shared/components/Button';\r\nimport { logoutRequestCreator } from '../../../Auth/reducer/authActionCreators';\r\nimport { clearData } from '../../../Processes/reducer/processesReducer';\r\n\r\nexport const LogoutContent = () => {\r\n    const username = useSelector(({auth}) => auth.username, shallowEqual);\r\n    const {t} = useTranslation('common');\r\n    const dispatch = useDispatch();\r\n    const profileText = `${t('header.user')}: ${username}`;\r\n\r\n    const handleClick = () => {\r\n        dispatch(logoutRequestCreator());\r\n        dispatch(clearData())\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <span style={{'paddingRight': '20px'}}>{profileText}</span>\r\n            <Button\r\n                text={t('header.logout')}\r\n                classType='transparent'\r\n                handleClick={handleClick}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {shallowEqual, useSelector} from 'react-redux';\r\n\r\nimport { LangSwitcher } from '../LangSwitcher';\r\nimport { LogoutContent } from '../LogoutContent';\r\n\r\nimport './Header.scss'\r\n\r\nexport const Header = () => {\r\n    const isAuthorized = useSelector(({auth}) => auth.isAuthorized, shallowEqual);\r\n\r\n    const headerContent = isAuthorized ?\r\n        <LogoutContent/> :\r\n        <LangSwitcher/>;\r\n\r\n    return (\r\n        <header className={'header'}>\r\n            {headerContent}\r\n        </header>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Drawer } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { requestPageFormFieldsRequestCreator } from '../../reducer/processesActionCreators';\r\nimport { toggleDrawerStatus } from '../../reducer/processesReducer';\r\n\r\nexport const DrawerContainer = () => {\r\n    const drawerVisible = useSelector(({processes}) => processes.drawerActive);\r\n    const drawerOptions = useSelector(({processes}) => processes.drawerOptions);\r\n    const dispatch = useDispatch();\r\n    const {t} = useTranslation('common');\r\n\r\n    const userProcesses = drawerOptions.map(element => (\r\n            <p\r\n                key={element.key}\r\n                onClick={() => {\r\n                    dispatch(toggleDrawerStatus());\r\n                    dispatch(requestPageFormFieldsRequestCreator(element.key, element.name));\r\n                }}\r\n                style={{'cursor': 'pointer'}}\r\n            >{element.name}</p>\r\n        )\r\n    );\r\n\r\n    const onClose = () => {\r\n        dispatch(toggleDrawerStatus());\r\n    };\r\n\r\n    return (\r\n        <Drawer\r\n            title={t('requestPage.newRequest')}\r\n            placement=\"right\"\r\n            closable={false}\r\n            onClose={onClose}\r\n            visible={drawerVisible}\r\n        >\r\n            {userProcesses}\r\n        </Drawer>\r\n    );\r\n};\r\n","export const typeConverter = (javaType) => {\r\n    switch (javaType) {\r\n        case 'string':\r\n            return 'text';\r\n        case 'long':\r\n            return 'number';\r\n        case 'file':\r\n            return 'file';\r\n        case 'boolean':\r\n            return 'checkbox';\r\n        case 'enum':\r\n            return 'select';\r\n        default:\r\n            return '';\r\n    }\r\n};\r\n\r\nexport const typeReassigner = (javaType) => {\r\n    if (javaType === 'long') {\r\n        return 'double';\r\n    }\r\n    if (javaType === 'enum') {\r\n        return 'string'\r\n    }\r\n    return javaType\r\n};\r\n","import React from 'react';\nimport { Formik, Form} from \"formik\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport { useTranslation } from 'react-i18next';\n\nimport { typeConverter, typeReassigner } from \"./typeConverter\";\nimport { SubmitContainer } from '../../../../shared/components/SubmitContainer/SubmitContainer';\nimport { startNewProcessRequestCreator } from '../../reducer/processesActionCreators';\nimport { toggleNewProcessModalStatus } from '../../reducer/processesReducer';\nimport { FormikField } from '../../../../shared/components/FormikField/FormikField';\n\nexport const NewProcessForm = () => {\n    const dispatch = useDispatch();\n    const { formFields, key } = useSelector(({processes}) => processes.formOptions);\n    const {t} = useTranslation('common');\n\n    const initialValues = Object.fromEntries(formFields.map(({type, id, defaultValue}) => type === 'boolean' ?\n        [ id, defaultValue ] :\n        [ id, '' ]));\n    const fieldTypes = Object.fromEntries(formFields.map(({id, type}) => [ id, typeReassigner(type) ]));\n\n    const fields = formFields.map(element => <FormikField\n        key={v4()}\n        type={typeConverter(element.type)}\n        name={element.id}\n        label={element.label}\n        placeholder={element.defaultValue}\n        options={element.options}\n    />);\n\n    const validate = values => {\n        const errors = {};\n        for (let key in values) {\n            if (!values[key] && fieldTypes[key] !== 'boolean') {\n                errors[key] = 'required';\n            }\n        }\n        return errors;\n    };\n\n    const onSubmit = (values, actions) => {\n        const processedData = {};\n        for (const key in values) {\n            processedData[key] = { value: values[key], type: fieldTypes[key] };\n        }\n        for (const key in processedData) {\n            if (processedData[key].type === 'date') {\n                let date = new Date(processedData[key].value);\n                let offset = date.getTimezoneOffset() / (-60);\n                let timezone = offset >= 10 ? `+${offset}00` : `+0${offset}00`;\n                processedData[key].value = date.toISOString().replace('Z', timezone);\n            }\n            if (processedData[key].type === 'file') {\n                processedData[key] = {\n                    value: processedData[key].value.base64file,\n                    type: 'file',\n                    valueInfo: {\n                        filename: processedData[key].value.filename,\n                        encoding: 'Base64',\n                    },\n                }\n            }\n        }\n        dispatch(startNewProcessRequestCreator(key, processedData));\n        dispatch(toggleNewProcessModalStatus());\n        actions.resetForm({\n            values: {},\n        })\n    };\n\n    const formProps = {\n        initialValues,\n        validate,\n        onSubmit,\n    };\n\n    return (\n        <Formik {...formProps} enableReinitialize>\n            <Form>\n                <div>\n                    {fields}\n                    <SubmitContainer text={t('requestPage.send')}/>\n                </div>\n            </Form>\n        </Formik>\n    );\n};\n\n","import React from 'react';\nimport { Modal } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toggleNewProcessModalStatus } from '../../reducer/processesReducer';\nimport { NewProcessForm } from '../NewProcessForm';\n\nexport const NewProcesessModal = () => {\n    const modalVisible = useSelector(({processes}) => processes.newProcessModalActive);\n    const { name } = useSelector(({processes}) => processes.formOptions);\n    const dispatch = useDispatch();\n\n    const handleCancel = () => {\n        dispatch(toggleNewProcessModalStatus());\n    };\n\n    const handleOk = () => {\n        dispatch(toggleNewProcessModalStatus())\n    };\n\n    return (\n        <Modal\n            title={name}\n            visible={modalVisible}\n            onOk={handleOk}\n            centered={true}\n            onCancel={handleCancel}\n            footer={null}\n            width={350}\n        >\n            <NewProcessForm/>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { Steps } from 'antd';\nimport { useSelector } from 'react-redux';\n\nexport const ProcessSteps = () => {\n    const { Step } = Steps;\n    const processStepsData = useSelector(({processes}) => processes.processStepsData);\n    const { processSteps, currentStepIndex } = processStepsData;\n    const stepsItems = processSteps.map(element => <Step title={element} description=\"step description, no data\" />);\n\n    return (\n        <Steps direction=\"vertical\" size=\"small\" current={currentStepIndex}>\n            {stepsItems}\n        </Steps>\n    );\n};\n","import React from 'react';\nimport { Modal } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport { toggleStepsModalStatus } from '../../reducer/processesReducer';\nimport { ProcessSteps } from '../ProcessSteps';\n\nexport const StepsModal = () => {\n    const modalVisible = useSelector(({processes}) => processes.stepsModalActive);\n    const dispatch = useDispatch();\n    const {t} = useTranslation('common');\n\n    const handleCancel = () => {\n        dispatch(toggleStepsModalStatus());\n    };\n\n    const handleOk = () => {\n        dispatch(toggleStepsModalStatus())\n    };\n\n    return (\n        <Modal\n            title={t('requestPage.status')}\n            visible={modalVisible}\n            onOk={handleOk}\n            centered={true}\n            onCancel={handleCancel}\n            footer={null}\n            width={350}\n        >\n            <ProcessSteps/>\n        </Modal>\n    );\n};\n","import React from 'react';\n\nimport { AppRoutes } from '../../routes';\nimport { Header } from '../../../client/Header/components/Header';\nimport { DrawerContainer } from '../../../client/Processes/components/DrawerContainer';\nimport { NewProcesessModal } from '../../../client/Processes/components/NewProcesessModal';\nimport { StepsModal } from '../../../client/Processes/components/StepsModal';\n\nimport '../../../shared/styles/scss/style.scss';\n\nexport const App = () => {\n    return (\n        <div className={'container app-wrapper'}>\n            <div className={'app-header'}>\n                <Header/>\n            </div>\n            <div className={'app-content'}>\n                <AppRoutes/>\n            </div>\n            <DrawerContainer/>\n            <NewProcesessModal/>\n            <StepsModal/>\n        </div>\n    );\n};\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport { authSlice } from '../../client/Auth/reducer/authReducer'\r\nimport { processesSlice } from '../../client/Processes/reducer/processesReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authSlice.reducer,\r\n    processes: processesSlice.reducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport {I18nextProvider} from \"react-i18next\";\nimport i18next from \"i18next\";\n\nimport * as serviceWorker from './service-worker';\nimport reportWebVitals from './report-web-vitals';\nimport { App } from './app/componets/App';\nimport store from './app/store/store';\nimport common_uk from './assets/locales/uk/common.json'\nimport common_en from './assets/locales/en/common.json'\n\ni18next.init({\n    interpolation: { escapeValue: false },\n    lng: 'uk',\n    resources: {\n        uk: {\n            common: common_uk\n        },\n        en: {\n            common: common_en\n        },\n    },\n});\n\nrender(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <I18nextProvider i18n={i18next}>\n                    <App/>\n                </I18nextProvider>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}